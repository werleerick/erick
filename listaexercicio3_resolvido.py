# -*- coding: utf-8 -*-
"""ListaExercicio3_resolvido.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ogQn0KXvQz-voJPtJkyhW25v5Sk_kXS7

## Regras gerais:

    - A resolu√ß√£o deve ser realizada individualmente
    - Pode realizar buscas na internet (Google) ou consultar os arquivos das aulas anteriores, mas n√£o deve trocar informa√ß√µes com os demais colegas

## Avalia√ß√£o de alternativas de projetos

Os dados do arquivo `projetos.csv` se referem aos valores futuros previstos para receita mensal de 5 projetos diferentes. A an√°lise dos dados permitir√° a decis√£o sobre o investitmento em um ou mais alternativas de projetos. Neste cen√°rio, os dados futuros se referem ao per√≠odo de 2025 e 2026.

1) Nesta etapa, fa√ßa o carregamento dos dados e apresente a df completa. (Peso: 1,0)
"""

import streamlit as st

st.set_page_config(
    page_title="Lista de Exerc√≠cios 3",
    page_icon="üëã",
)

st.header("Lista de Exerc√≠cios 3")

import pandas as pd

arquivo = "projetos.csv"
df = pd.read_csv(arquivo, sep=';')
st.dataframe(df.head(len(df)))

"""2) Atualize a DataFrame criado no Exe1, adicionando mais uma linha ao final com os dados referentes ao m√™s de dezembro de 2026. Depois apresente as √∫ltimas linhas da df para checar se ocorreu como deveria. (Peso: 2,0)

mes | ano | Projeto1 | Projeto2 | Projeto3 | Projeto4 | Projeto5
--- | --- | -------- | -------- | -------- | -------- | --------
12 | 2026 | 29376 | 40392 | 63648 | 29376 | 25704


Dica: o m√©todo `append` parou de funcionar como alternativa para incluir dados ao final do DataFrame. Sugiro utilizar o m√©todo `concat`

obs: a partir deste ponto, utilize a df atualizada, agora com 24 meses de dados
"""

df1 = pd.DataFrame({'mes': [12], 'ano': [2026], 'Projeto1': [29376], 'Projeto2': [40392], 'Projeto3': [63648], 'Projeto4': [29376], 'Projeto5': [25704] })
df = pd.concat([df, df1])
st.dataframe(df.head(len(df)))

"""3) Apresente a soma dos valores de cada projeto agrupado por ano. (Peso: 1,0)"""

colunas = ['Projeto1', 'Projeto2', 'Projeto3', 'Projeto4', 'Projeto5']
st.dataframe(df.groupby('ano')[colunas].sum())

"""4) Deseja-se calcular o Valor Presente (VP) de cada projeto, considerando uma taxa de juros mensal constante de 2%. Para isto, crie uma fun√ß√£o `valor_presente(fluxos, taxa)` e depois aplique a fun√ß√£o para calcular o VP de todos os projetos. (Peso: 2,0)

Dicas:
- A fun√ß√£o `valor_presente` deve receber uma vari√°vel que cont√©m lista/s√©rie e valor da taxa (formato n√∫mero, exemplo 0.02)
- Dentro da fun√ß√£o, deve percorrer a lista e calcular o valor presente de cada valor: VP = `valor - (valor * (taxa**t))`
- Ao final da repeti√ß√£o deve retornar com a soma dos VP de cada m√™s
- Utilize a fun√ß√£o para calcular e apresentar o VP de cada projeto, utilizando taxa de juros de 2% para calcular. Deve apresentar os VP em formato R$ e com duas casas decimais
"""

def valor_presente(fluxos, taxa):
    total = 0
    for t, valor in enumerate(fluxos):
      VP = valor / ((1 + taxa) ** (t + 1))
      total = total + VP
    return total

st.write("Valor Presente dos projetos:")
st.write(f"Projeto1: R$ {valor_presente(df['Projeto1'], 0.02):,.2f}")
st.write(f"Projeto2: R$ {valor_presente(df['Projeto2'], 0.02):,.2f}")
st.write(f"Projeto3: R$ {valor_presente(df['Projeto3'], 0.02):,.2f}")
st.write(f"Projeto4: R$ {valor_presente(df['Projeto4'], 0.02):,.2f}")
st.write(f"Projeto5: R$ {valor_presente(df['Projeto5'], 0.02):,.2f}")

def valor_presente(fluxos, taxa):
    total = 0
    for t, valor in enumerate(fluxos):
      VP = valor - (valor * (taxa**t))
      total = total + VP
    return total

st.write("Valor Presente dos projetos:")
st.write(f"Projeto1: R$ {valor_presente(df['Projeto1'], 0.02):,.2f}")
st.write(f"Projeto2: R$ {valor_presente(df['Projeto2'], 0.02):,.2f}")
st.write(f"Projeto3: R$ {valor_presente(df['Projeto3'], 0.02):,.2f}")
st.write(f"Projeto4: R$ {valor_presente(df['Projeto4'], 0.02):,.2f}")
st.write(f"Projeto5: R$ {valor_presente(df['Projeto5'], 0.02):,.2f}")

"""5) Gere um gr√°fico de dispers√£o cruzando os dados do `Projeto1` e `Projeto2`, com marcadores verdes e em formato de estrela. (Peso: 2,0)"""

import matplotlib.pyplot as plt
fig, ax = plt.subplots()
df.plot(kind = 'scatter', x = 'Projeto1', y = 'Projeto2', color='darkgreen', marker='*', ax=ax)
st.pyplot(fig)

"""6) Crie um gr√°fico de linha que mostre a evolu√ß√£o dos valores dos projetos ao longo do tempo. (Peso: 2,0)

Dicas:
- Antes de plotar, deve criar uma nova vari√°vel `Data` que surgir√° da concatena√ß√£o de `ano` e `m√™s`. Para isto pode utilizar a fun√ß√£o to_datetime: `pd.to_datetime(dict(year=df["ano"], month=df["mes"], day=1))`
- Depois, ordene a df utilizando a nova vari√°vel `Data`, utilizando `sort_values()`
- Para conseguir apresentar mais de uma vari√°vel (todos os projetos) no mesmo gr√°fico, uma dica importante est√° no funcionamento do pacote `matplotlib`
  - A l√≥gica de plotar gr√°fico no `matplotlib` segue o caminho das fun√ß√µes figure (inicia a√ß√£o), plot (monta o gr√°fico) e show (apresenta). Logo, todos os plot que forem montados entre o figure e o show v√£o aparecer no mesmo gr√°fico
  - `plt.figure(figsize=(10,6))`
  - `plt.plot()`
  - `plt.show()`
"""

df["Data"] = pd.to_datetime(dict(year=df["ano"], month=df["mes"], day=1))

df = df.sort_values("Data")
st.dataframe(df)

projetos = ["Projeto1", "Projeto2", "Projeto3", "Projeto4", "Projeto5"]

fig, ax = plt.subplots()
plt.figure(figsize=(10,6))
for projeto in projetos:
    plt.plot(df["Data"], df[projeto], marker="o", label=projeto, ax=ax)

plt.title("Evolu√ß√£o dos Fluxos de Caixa dos Projetos")
plt.xlabel("Tempo (Ano-M√™s)")
plt.ylabel("Valor (R$)")
plt.legend(title="Projetos")
plt.grid(True)
plt.tight_layout()
st.pyplot(fig)